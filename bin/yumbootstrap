#!/usr/bin/python

import os
import sys
import optparse
import time
import errno

import yumbootstrap.yum
import yumbootstrap.suites
from yumbootstrap.exceptions import YBError

#-----------------------------------------------------------------------------

SUITE_DIR = '/etc/yumbootstrap/suites'

#-----------------------------------------------------------------------------

o = optparse.OptionParser(
  usage = '\n  %prog [options] <suite> <target>'
          '\n  %prog [options] --print-config <suite> <target> > yum.conf'
          '\n  %prog [options] --list-suites'
          '\n  %prog [options] <suite|target> --list-scripts'
          '\n  %prog [options] <target> --just-scripts [script script ...]'
          '',
  description = 'Install Yum-based distribution in a chroot environment.',
)

#-----------------------------------------------------------

expected_nargs = {
  'install':      [2],
  'yum.conf':     [2],
  'list_suites':  [0],
  'list_scripts': [1],
  'scripts':      xrange(1, 0xFFFFFFFF), # enough for any number of args
  #'download':     [?],
  #'second_stage': [?],
  #'tarball':      [?],
}

o.set_defaults(
  action = 'install',
  include = [],
  exclude = [],
  groups = [],
  repositories = {},
)

def add_pkg_list(option, opt, value, parser, attr):
  getattr(parser.values, attr).extend(value.split(','))

def add_kv_list(option, opt, value, parser, attr):
  if '=' not in value:
    raise optparse.OptionValueError('"%s" is not in NAME=VALUE format' % value)
  (k,v) = value.split('=', 1)
  getattr(parser.values, attr)[k] = v

#-----------------------------------------------------------

# to be filled after o.parse_args()
verbose = False

def op(message, *args):
  if verbose:
    print time.strftime('[%T] ') + (message % args)

#-----------------------------------------------------------

o.add_option(
  '--print-config',
  action = 'store_const', dest = 'action', const = 'yum.conf',
  help = 'print Yum configuration which will be used by yumbootstrap',
)
o.add_option(
  '--list-suites',
  action = 'store_const', dest = 'action', const = 'list_suites',
  help = 'list available suites and exit',
)
o.add_option(
  '--list-scripts',
  action = 'store_const', dest = 'action', const = 'list_scripts',
  help = 'list scripts in a suite (or in a target created with --no-scripts)'
         ' and exit',
)
o.add_option(
  '--just-scripts',
  action = 'store_const', dest = 'action', const = 'scripts',
  help = 'list available suites and exit',
)

#-----------------------------------------------------------

o.add_option(
  '--verbose',
  action = 'store_true', default = False,
  help = 'be verbose about operations',
)
o.add_option(
  '--noninteractive',
  action = 'store_false', dest = 'interactive', default = True,
  help = 'run in non-interactive mode (e.g. no progress bars)',
)
#o.add_option(
#  '--arch', # TODO
#  action = 'store', default = os.uname()[4],
#  help = 'specify target architecture',
#)
#o.add_option(
#  '--proxy', # TODO
#  action = 'store', type = 'string', default = None,
#  help = 'specify a proxy to use when fetching files',
#  metavar = 'HOST:PORT',
#)
o.add_option(
  '--skip-script',
  action = 'append', dest = 'skip', default = [],
  help = 'skip this post-install script(s) (may be specified multiple times;'
         ' see also --list-scripts)',
  metavar = 'NAME',
)
o.add_option(
  '--no-scripts',
  action = 'store_false', dest = 'run_scripts', default = True,
  help = "don't run any post-install scripts after installation",
)
o.add_option(
  '--suite-dir',
  action = 'store', dest = 'suite_dir', type = 'string', default = SUITE_DIR,
  help = 'specify a directory with suite definitions',
  metavar = 'PATH',
)
o.add_option(
  '--include',
  action = 'callback', type = 'string',
  callback = add_pkg_list, callback_args = ('include',),
  help = 'include these packages (comma separated list; may be specified'
         ' multiple times)',
  metavar = 'RPMS',
)
o.add_option(
  '--exclude',
  action = 'callback', type = 'string',
  callback = add_pkg_list, callback_args = ('exclude',),
  help = 'exclude these packages (comma separated list; may be specified'
         ' multiple times)',
  metavar = 'RPMS',
)
o.add_option(
  '--groups',
  action = 'callback', type = 'string',
  callback = add_pkg_list, callback_args = ('groups',),
  help = 'install these package groups (comma separated list; may be specified'
         ' multiple times)',
)
#o.add_option(
#  '--no-default-rpms', # TODO
#  action = 'store_false', dest = 'install_default_rpms', default = True,
#  help = "don't install default RPMs set (useful for splitting installation"
#         " into several parts; see also --skip-fix-rpmdb and --skip-cleanup"
#         " options)",
#)
o.add_option(
  '--gpg-key',
  action = 'append', dest = 'gpg_keys', default = [],
  help = 'add GPG key as a trusted RPM signing key (may be specified'
         ' multiple times)',
  metavar = 'KEYFILE',
)
o.add_option(
  '--repo',
  action = 'callback', type = 'string',
  callback = add_kv_list, callback_args = ('repositories',),
  help = 'use this Yum repository (may be specified multiple times)',
  metavar = 'NAME=URL',
)
#o.add_option(
#  '--download-only', # TODO
#  action = 'store_const', dest = 'action', const = 'download',
#  help = "download RPMs only, don't install them",
#)
#o.add_option(
#  '--foreign', # TODO
#  action = 'store_true', dest = 'no_scripts', default = False,
#  help = "don't run post-install scripts from RPM (mainly useful for"
#         " non-matching architecture in --arch option)",
#)
#o.add_option(
#  '--second-stage', # TODO
#  action = 'store_const', dest = 'action', const = 'second_stage',
#  help = "finalize the installation started with --foreign option",
#)
#o.add_option(
#  '--make-tarball', # TODO
#  action = 'store_const', dest = 'action', const = 'tarball',
#  help = "make a tarball with RPMs instead of installing them",
#)
#o.add_option(
#  '--unpack-tarball', # TODO
#  action = 'store', dest = 'tarball', default = None,
#  help = "use RPMs from a tarball created with --make-tarball option",
#)

opts, args = o.parse_args()

if len(args) not in expected_nargs[opts.action]:
  o.error("wrong number of arguments")

verbose = opts.verbose

#-----------------------------------------------------------------------------

#-----------------------------------------------------------

# helper function
def write_cached_suite(yumbootstrap_dir, suite_dir, suite_name):
  from yumbootstrap.fs import touch
  # just hope nobody uses directory names with whitespaces (NL, space or
  # similar)
  suite_file_content = "suite_name: %s\nsuite_dir: %s" % \
                       (suite_name, os.path.abspath(suite_dir))
  touch(yumbootstrap_dir, 'suite_location', text = suite_file_content)

#-----------------------------------------------------------

# helper function
def read_cached_suite(target):
  yum_conf = yumbootstrap.yum.YumConfig(chroot = target)
  suite_location_file = os.path.join(yum_conf.root_dir, 'suite_location')
  try:
    suite_location = dict([
      line.strip().split(': ', 1)
      for line in open(suite_location_file).readlines()
    ])
    suite = yumbootstrap.suites.load_suite(
      suite_location['suite_dir'],
      suite_location['suite_name'],
    )
    return suite
  except IOError, e:
    if e.errno == errno.ENOENT:
      raise YBError("\"%s\" is not a prepared target", target, exit = 1)
    else:
      raise YBError('errno=%d: %s', e.errno, e.strerror)

#-----------------------------------------------------------

# helper function
def run_post_install_scripts(suite, skip = [], just = []):
  op("executing post-install scripts")
  from yumbootstrap import sh

  skip = set(skip)
  if len(just) == 0:
    just = set(suite.post_install.names())
  else:
    just = set(just)

  for (script_name, script) in suite.post_install:
    if script_name in skip or script_name not in just:
      op("skipping %s", script_name)
      continue
    op("running %s", script_name)
    os.environ['SCRIPT_NAME'] = script_name
    os.environ['SCRIPT_PATH'] = script[0]
    sh.run(script, env = suite.environment)

#-----------------------------------------------------------

# helper function
def set_scripts_environment(opts, target):
  os.environ["TARGET"] = os.path.abspath(target)
  if opts.verbose:
    os.environ["VERBOSE"] = "true"
  else:
    os.environ["VERBOSE"] = "false"

#-----------------------------------------------------------

def do_install(opts, suite_name, target):
  from yumbootstrap.fs import touch

  set_scripts_environment(opts, target)
  suite = yumbootstrap.suites.load_suite(opts.suite_dir, suite_name)

  op("installing %s (release %s) to %s", suite.name, suite.release, target)

  op("preparing empty /etc/fstab and /etc/mtab")
  os.umask(022)
  # prepare target directory with an empty /etc/fstab
  touch(target, 'etc/fstab', text = '# empty fstab')
  touch(target, 'etc/mtab')

  if len(opts.repositories) > 0:
    op("using custom repositories: %s", ", ".join(sorted(opts.repositories)))
    repositories = opts.repositories
  else:
    op("using built-in repositories")
    repositories = suite.repositories

  yum_conf = yumbootstrap.yum.YumConfig(
    chroot = target,
    repos = repositories,
    env = suite.environment,
  )

  write_cached_suite(yum_conf.root_dir, opts.suite_dir, suite_name)

  # installing works also without adding key, but --nogpgcheck is passed to
  # Yum, so it's generally discouraged
  if len(opts.gpg_keys) > 0 or len(suite.gpg_keys) > 0:
    op("adding GPG keys")
    for keyfile in opts.gpg_keys:
      yum_conf.add_key(keyfile)
    for keyfile in suite.gpg_keys:
      yum_conf.add_key(keyfile)
  else:
    pass # TODO: print warning

  yum = yumbootstrap.yum.Yum(
    chroot = target,
    yum_conf = yum_conf,
    interactive = opts.interactive,
  )

  exclude = suite.packages.exclude + opts.exclude

  # main set of packages (should already include yum and /usr/bin/db_load, so
  # `yum.fix_rpmdb()' works)
  op("installing default packages for %s %s", suite.name, suite.release)
  install = suite.packages.install + ['@' + g for g in suite.packages.groups]
  yum.install(install, exclude = exclude)

  # requested additional packages
  if len(opts.include) > 0:
    op("installing additional packages requested from command line")
    yum.install(opts.include, exclude = exclude)
  if len(opts.groups) > 0:
    op("installing additional package groups requested from command line")
    yum.group_install(opts.groups, exclude = exclude)

  if len(suite.post_install) > 0:
    if opts.run_scripts:
      run_post_install_scripts(suite, skip = opts.skip)
    else:
      op("skipping post-install scripts altogether")

  op("operation finished")

#-----------------------------------------------------------

def do_list_suites(opts):
  for suite in yumbootstrap.suites.list_suites(opts.suite_dir):
    print suite

#-----------------------------------------------------------

def do_list_scripts(opts, target):
  if target in yumbootstrap.suites.list_suites(opts.suite_dir):
    suite = yumbootstrap.suites.load_suite(opts.suite_dir, target)
  else:
    suite = read_cached_suite(target)
  for name in suite.post_install.names():
    print name

#-----------------------------------------------------------

def do_scripts(opts, target, *scripts):
  set_scripts_environment(opts, target)
  suite = read_cached_suite(target)
  run_post_install_scripts(suite, skip = opts.skip, just = scripts)

#-----------------------------------------------------------

def do_yum_conf(opts, suite, target):
  suite = prepare_suite(suite)

  if len(opts.repositories) > 0:
    repositories = opts.repositories
  else:
    repositories = suite.repositories()

  yum_conf = yumbootstrap.yum.YumConfig(chroot = target, repos = repositories)

  if len(opts.gpg_keys) > 0:
    cmd = 'cat %s > %s' % (' '.join(opts.gpg_keys), yum_conf.gpg_keys)
    sys.stdout.write('# remember to put the keys to target directory:\n')
    sys.stdout.write('# %s\n\n' % (cmd))
    for keyfile in opts.gpg_keys:
      yum_conf.add_key(keyfile, pretend = True)

  sys.stdout.write(yum_conf.text())
  sys.stdout.flush()

#-----------------------------------------------------------

#-----------------------------------------------------------------------------

try:
  if opts.action == 'install':
    do_install(opts, *args)
  elif opts.action == 'list_suites':
    do_list_suites(opts, *args)
  elif opts.action == 'list_scripts':
    do_list_scripts(opts, *args)
  elif opts.action == 'scripts':
    do_scripts(opts, *args)
  elif opts.action == 'yum.conf':
    do_yum_conf(opts, *args)
  else:
    # should never happen
    o.error("unrecognized action: %s" % (opts.action,))
except KeyboardInterrupt:
  pass
except YBError, e:
  print >>sys.stderr, e
  sys.exit(e.code)

#-----------------------------------------------------------------------------
# vim:ft=python
